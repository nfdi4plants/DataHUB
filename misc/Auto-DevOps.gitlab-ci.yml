variables:
  GIT_LFS_SKIP_SMUDGE: "1"

workflow:
  rules:
    - if: '$CI_COMMIT_REF_NAME != "cqc"'
      when: always

image:
  name: "ghcr.io/nfdi4plants/arc-validate:main"

stages:
  - arc_json
  - quality_report_generator
  - quality_report
  - generate_metadata

Create ARC JSON:
  stage: arc_json
  image: 
    name: ghcr.io/nfdi4plants/arc-export:main
    entrypoint: [""]
  variables:
    ARC_PATH: .
  script:
    - /arc-export -f rocrate-metadata-lfs -f isa-json -f summary-markdown -p .
    - |
      for file in arc.json arc-isa.json arc-ro-crate-metadata.json arc-summary.md; do
        target="$file"
        [ "$target" = "arc.json" ] && file="arc-isa.json" # hack for arc{,.isa}.json case
        curl --header "JOB-TOKEN: $CI_JOB_TOKEN" \
          --upload-file $file \
          "${CI_API_V4_URL}/projects/${CI_PROJECT_ID}/packages/generic/isa_arc_json/0.0.1/$target" || true
      done
  artifacts:
    when: always
    paths:
      - arc.json
      - arc-isa.json
      - arc-summary.md
      - arc-ro-crate-metadata.json

quality_report_generator:
  stage: quality_report_generator
  rules:
    - if: $CI_COMMIT_REF_NAME != "cqc"
    - exists:
      - .arc/validation_packages.yml
  script:
    - |
      if [ ! -e "${CI_PROJECT_DIR}/.arc/validation_packages.yml" ]; then
        exit 0
      fi
    - |
      cat << EOF > quality_reports.yml
      stages:
        - arc_validation
        - generate_metadata
      EOF
    - |
      arc_validation_spec="$(yq -r '.arc_specification // ""' ${CI_PROJECT_DIR}/.arc/validation_packages.yml)"
      if [ -n "$arc_validation_spec" ]; then
        cat << EOF >> quality_reports.yml
      validate-arc:
        stage: arc_validation
        image: "ghcr.io/nfdi4plants/arc-validate:main"
        script:
          - arc-validate validate --specification-version "$arc_validation_spec"
          - ret=$?
          - mkdir -p "${CI_COMMIT_BRANCH}"
          - mv ".arc-validate-results/${p}"* "${CI_COMMIT_BRANCH}"
          - find "$CI_COMMIT_BRANCH" || true
          - exit $ret
        artifacts:
          when: always
          paths:
            - $CI_COMMIT_BRANCH/*/*
          reports:
            junit:
              - $CI_COMMIT_BRANCH/*/*.xml
          expire_in: 1 hour
      EOF
      fi
      while read -r p v ; do
        install_command=("arc-validate" "package" "install" "$p")
        validate_command=("arc-validate" "validate" "-p" "$p")
        [ "$v" = "null" ] && v=""
        if [ -n "$v" ]; then
          install_command+=("-v" "$v")
          validate_command+=("-v" "$v")
        fi

        cat << EOF >> quality_reports.yml
      validate-${p}:
        stage: arc_validation
        image: "ghcr.io/nfdi4plants/arc-validate:main"
        script:
          - ${install_command[@]}
          - ${validate_command[@]}
          - ret=$?
          - mkdir -p "${CI_COMMIT_BRANCH}"
          - mv ".arc-validate-results/${p}"* "${CI_COMMIT_BRANCH}"
          - find "$CI_COMMIT_BRANCH" || true
          - exit $ret
        artifacts:
          when: always
          paths:
            - $CI_COMMIT_BRANCH/*/*
          reports:
            junit:
              - $CI_COMMIT_BRANCH/*/*.xml
          expire_in: 1 hour
      EOF
        if [ "$p" = "invenio" ]; then
          cat << EOF >> quality_reports.yml
      Publication Metadata:
        stage: generate_metadata
        needs:
          - validate-invenio
        image: ghcr.io/nfdi4plants/arc-to-invenio:main
        script:
          - echo "Creating publication metadata..."
          - arc-to-invenio -p .
          - cat metadata.json || exit 1
        artifacts:
          when: always
          paths:
            - metadata.json
        when: always
      EOF
        fi
        cat quality_reports.yml
      done < <(yq -r '.validation_packages[] | "\(.name) \(.version)"' ${CI_PROJECT_DIR}/.arc/validation_packages.yml )
  artifacts:
    when: always
    paths:
      - quality_reports.yml
    expire_in: 1 hour

quality_report:
  stage: quality_report
  trigger:
    include:
      - artifact: quality_reports.yml
        job: quality_report_generator
  rules:
    - exists:
      - .arc/validation_packages.yml
